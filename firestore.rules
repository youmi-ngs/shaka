rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========== Helper Functions ==========
    // 認証チェック
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 本人確認
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // URLバリデーション
    function isValidURL(url) {
      return url == null || (url is string && url.matches('^https?://.*'));
    }
    
    // 文字列長チェック
    function isValidStringLength(str, maxLength) {
      return str == null || (str is string && str.size() <= maxLength);
    }
    
    // ========== Users Collection ==========
    match /users/{userId} {
      // 読み取りルール - シンプル化
      // 誰でも読める（プライベートデータの保護は書き込み時に行う）
      allow read: if true;
      
      // 作成ルール（初回のユーザー作成）- 簡略化
      allow create: if isOwner(userId)
        && request.resource.data.public.displayName is string
        && request.resource.data.public.displayName.size() > 0
        && request.resource.data.public.displayName.size() <= 50;
      
      // 更新ルール（既存ユーザーの更新）- 簡略化
      allow update: if isOwner(userId)
        && request.resource.data.public.displayName is string
        && request.resource.data.public.displayName.size() > 0
        && request.resource.data.public.displayName.size() <= 50;
      
      // 削除は本人のみ可能（アカウント削除時）
      allow delete: if isOwner(userId);
    }
    
    // ========== Works Collection ==========
    match /works/{workId} {
      // 誰でも読み取り可能（オープンSNS）
      allow read: if true;
      
      // ログインユーザーのみ作成可能
      allow create: if isAuthenticated()
        && request.resource.data.userID == request.auth.uid
        && request.resource.data.title is string
        && request.resource.data.title.size() > 0
        && request.resource.data.title.size() <= 200;
      
      // 投稿者本人のみ更新可能
      allow update: if isAuthenticated()
        && resource.data.userID == request.auth.uid
        && request.resource.data.userID == resource.data.userID // userIDは変更不可
        && request.resource.data.createdAt == resource.data.createdAt; // createdAtは変更不可
      
      // 投稿者本人のみ削除可能
      allow delete: if isAuthenticated()
        && resource.data.userID == request.auth.uid;
      
      // 作品へのコメント
      match /comments/{commentId} {
        // 誰でも読み取り可能（公開コメント）
        allow read: if true;
        
        // ログインユーザーのみコメント作成可能（簡略化）
        allow create: if isAuthenticated()
          && request.resource.data.userID == request.auth.uid
          && request.resource.data.text is string
          && request.resource.data.text.size() > 0
          && request.resource.data.text.size() <= 1000;
        
        // コメント投稿者本人のみ削除可能
        allow delete: if isAuthenticated()
          && resource.data.userID == request.auth.uid;
        
        // コメントの更新は禁止
        allow update: if false;
      }
      
      // 作品へのいいね
      match /likes/{uid} {
        // 誰でも読み取り可能（公開）
        allow read: if true;
        
        // 本人のみいいねを作成可能
        allow create: if isAuthenticated()
          && request.auth.uid == uid
          && request.resource.data.keys().hasOnly(['createdAt'])
          && request.resource.data.createdAt is timestamp;
        
        // 本人のみいいねを削除可能
        allow delete: if isAuthenticated() 
          && request.auth.uid == uid;
        
        // 更新は禁止（冪等運用）
        allow update: if false;
      }
    }
    
    // ========== Following Collection (旧Friends) ==========
    // 全階層を一括で許可
    match /following/{document=**} {
      // 読み取りは全て許可（オープンSNS）
      allow read: if true;
      
      // 書き込み：認証済みユーザーのみ（一時的にシンプル化）
      allow write: if request.auth != null;
    }
    
    // フォロワーリスト（逆引き用）
    match /followers/{userId}/users/{followerId} {
      // 誰でも読み取り可能
      allow read: if true;
      
      // フォロワー本人のみ追加・削除可能
      allow create: if isAuthenticated() 
        && request.auth.uid == followerId
        && request.resource.data.uid == followerId
        && request.resource.data.keys().hasAll(['createdAt', 'uid']);
      
      allow delete: if isAuthenticated() 
        && (request.auth.uid == followerId || request.auth.uid == userId);
      
      // 更新は禁止
      allow update: if false;
    }
    
    // フォロワーコレクションのドキュメント自体の削除（アカウント削除時）
    match /followers/{userId} {
      allow delete: if isOwner(userId);
    }
    
    // ========== Friend Requests Collection (将来用) ==========
    match /friendRequests/{toUserId}/inbox/{fromUserId} {
      // 読み取り：受信者本人のみ
      allow read: if isOwner(toUserId);
      
      // 作成：送信者本人のみ
      allow create: if isOwner(fromUserId)
        && request.resource.data.keys().hasAll(['createdAt'])
        && request.resource.data.keys().hasOnly(['createdAt', 'message'])
        && request.resource.data.createdAt is timestamp
        && isValidStringLength(request.resource.data.get('message', ''), 200);
      
      // 削除：受信者または送信者
      allow delete: if isOwner(toUserId) || isOwner(fromUserId);
      
      // 更新は禁止
      allow update: if false;
    }
    
    // ========== Questions Collection ==========
    match /questions/{questionId} {
      // 誰でも読み取り可能
      allow read: if true;
      
      // ログインユーザーのみ作成可能（最小限のチェック）
      allow create: if isAuthenticated()
        && request.resource.data.userID == request.auth.uid;
      
      // 投稿者本人のみ更新可能
      allow update: if isAuthenticated()
        && resource.data.userID == request.auth.uid
        && request.resource.data.userID == resource.data.userID // userIDは変更不可
        && request.resource.data.createdAt == resource.data.createdAt; // createdAtは変更不可
      
      // 投稿者本人のみ削除可能
      allow delete: if isAuthenticated()
        && resource.data.userID == request.auth.uid;
      
      // 質問へのコメント（公開）
      match /comments/{commentId} {
        // 誰でも読み取り可能（公開コメント）
        allow read: if true;
        
        // ログインユーザーのみコメント作成可能（簡略化）
        allow create: if isAuthenticated()
          && request.resource.data.userID == request.auth.uid
          && request.resource.data.text is string
          && request.resource.data.text.size() > 0
          && request.resource.data.text.size() <= 1000;
        
        // コメント投稿者本人のみ削除可能
        allow delete: if isAuthenticated()
          && resource.data.userID == request.auth.uid;
        
        // コメントの更新は禁止
        allow update: if false;
      }
      
      // 質問へのいいね
      match /likes/{uid} {
        // 誰でも読み取り可能（公開）
        allow read: if true;
        
        // 本人のみいいねを作成可能
        allow create: if isAuthenticated()
          && request.auth.uid == uid
          && request.resource.data.keys().hasOnly(['createdAt'])
          && request.resource.data.createdAt is timestamp;
        
        // 本人のみいいねを削除可能
        allow delete: if isAuthenticated() 
          && request.auth.uid == uid;
        
        // 更新は禁止（冪等運用）
        allow update: if false;
      }
    }
    
    // ========== FCMトークン管理（プライベート） ==========
    match /users_private/{uid}/fcmTokens/{token} {
      // 本人のみ読み書き可能
      allow read: if isOwner(uid);
      
      // 作成・更新：本人のみ、必須フィールドのみ
      allow create, update: if isOwner(uid)
        && request.resource.data.keys().hasOnly(['platform', 'updatedAt'])
        && request.resource.data.platform in ['ios', 'android']
        && request.resource.data.updatedAt is timestamp;
      
      // 削除：本人のみ
      allow delete: if isOwner(uid);
    }
    
    // ========== 通知管理 ==========
    match /notifications/{uid} {
      // 本人のみ読み取り可能
      allow read: if isOwner(uid);
      
      // Cloud Functionsのみ作成可能（サーバーサイドのみ）
      allow create: if false;
      
      // 本人のみ削除可能（アカウント削除時）
      allow delete: if isOwner(uid);
      
      // 通知アイテム
      match /items/{notificationId} {
        // 本人のみ読み取り可能
        allow read: if isOwner(uid);
        
        // Cloud Functionsのみ作成可能
        allow create: if false;
        
        // 本人のみ更新可能（既読フラグのみ）
        allow update: if isOwner(uid)
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read'])
          && request.resource.data.read is bool;
        
        // 本人のみ削除可能
        allow delete: if isOwner(uid);
      }
    }
  }
}

// ========== テストケース ==========
// 【許可されるケース】
// 1. 誰でも users/{uid}/public.displayName を読める
// 2. 本人が自分の users/{uid}/public.displayName を更新できる
// 3. 本人が自分の users/{uid}/private.joinedAt を読める
// 4. 認証済みユーザーが他人の users/{uid}/stats.worksCount を読める

// 【拒否されるケース】
// 1. 他人が users/{uid}/private.email を読もうとする
// 2. 他人が users/{uid}/public.displayName を更新しようとする
// 3. 本人が users/{uid}/private.joinedAt を変更しようとする
// 4. クライアントが users/{uid}/stats.worksCount を直接更新しようとする
// 5. 空の displayName で users/{uid} を作成しようとする
// 6. 300文字を超える bio で users/{uid} を更新しようとする